static <T> Optional<T> empty()
Optional<T> filter(Predicate<? super T> predicate)
<U> Optional<U> flatMap(Function<? super T,Optional<U>> mapper)
T get()
void ifPresent(Consumer<? super T> consumer)
boolean isPresent()
<U> Optional<U> map(Function<? super T,? extends U> mapper)
static <T> Optional<T> of(T value)
static <T> Optional<T> ofNullable(T value)
T orElse(T other)
T orElseGet(Supplier<? extends T> other)
<X extends Throwable> T orElseThrow(Supplier<? extends X> exceptionSupplier)